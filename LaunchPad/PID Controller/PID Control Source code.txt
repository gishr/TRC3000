#include<string.h>
#include<stdio.h>
typedef struct PID { 
double SetPoint; // Desired value 
double Proportion; // Proportional Const 
double Integral; // Integral Const 
double Derivative; // Derivative Const 
double LastError; // Error[-1] 

double PrevError; // Error[-2] 
double SumError; // Sums of Errors 
} PID; 

/*==================================================================================================== 
PID Controller
=====================================================================================================*/ 
double PIDCalc( PID *pp, double NextPoint ) 
{ 
    double dError, Error; 
    Error = pp->SetPoint - NextPoint; //  Error
    pp->SumError += Error; // Pintegra
    dError = pp->LastError - pp->PrevError; // Current Differentiation  
    pp->PrevError = pp->LastError; 
    pp->LastError = Error; 
    return (pp->Proportion * Error // ratio
    + pp->Integral * pp->SumError // Integral 
    + pp->Derivative * dError );         // Differentiation
} 

/*==================================================================================================== 
PID Initialization
=====================================================================================================*/ 
void PIDInit (PID *pp) 
{ 
memset ( pp,0,sizeof(PID)); 
} 

/*==================================================================================================== 
Sensor Readings
======================================================================================================*/ 
double sensor (void)  
{ 
return 100.0; 
} 

/*====================================================================================================
Output Control
======================================================================================================*/ 
void actuator(double rDelta)  
{
} 

//Main Function 
void main(void) 
{ 
    PID sPID; // PID Control Structure 
    double rOut; // PID Response (Output) 
    double rIn; // PID Feedback (Input) 
    PIDInit ( &sPID ); // Initialize Structure 
    sPID.Proportion = 0.5; // Set PID Coefficients 
    sPID.Integral = 0.5; 
    sPID.Derivative = 0.0; 
    sPID.SetPoint = 100.0; // Set PID Setpoint 
    for (;;) 
    {                                   // Mock Up of PID Processing 
        rIn = sensor ();                // (Read Input )
        rOut = PIDCalc ( &sPID,rIn );   // (Perform PID Interation) 
        actuator ( rOut );              // (Effect Needed Changes) 
    } 
}