    #define FULL                        0x40

    #define YES                        0x30


    static unsigned char tx_buffer[8];
    static unsigned char rx_buffer[8];

    static unsigned char key =  FULL;

    static unsigned char key2 = YES;

    static unsigned char *TXData = 0;

    static unsigned char *RXData = 0;

    unsigned char flag;

#include <msp430.h>

int main(void)
{
  WDTCTL = WDTPW + WDTHOLD;                 // Stop WDT

  TA0CTL = TASSEL_2 | MC_1 | ID_3; // SMCLK/8, up mode

  // CCRO defines the limit the selected timer can count up to
  // Clock frequency by default 32.768 MHz, counting frequency cycle 32768 / clock frequency = 1 second
  TA0CCR0 = 512-1;

  P1DIR |= BIT2 + BIT3;// P1.0 pin set as output the rest are input
  P1SEL |= BIT2+BIT3;

  P1DIR |= BIT4 + BIT5;
  P1SEL |= BIT4 + BIT5;

  TA0CCTL1 = OUTMOD_7;                      // CCR1 reset/set
  TA0CCTL2 = OUTMOD_7;                      // CCR2 reset/set
  TA0CCTL3 = OUTMOD_7;
  TA0CCTL4 = OUTMOD_7;

  TA0CCR1 = 0;
  TA0CCR2 = 400;                            // CCR2 PWM duty cycle

  TA0CCR3 = 0;
  TA0CCR4 = 400;

  // TACLR timer reset    so there's no need to manually reset the timer when it reaches the limit
  TA0CTL = TASSEL_2 + MC_1 + TACLR;
  //////

  P3SEL |= BIT3+BIT4;                       // P3.3,4 = USCI_A0 TXD/RXD

  UCA0CTL1 |= UCSWRST;                      // **Put state machine in reset**
  UCA0CTL1 |= UCSSEL_2;                     // SMCLK
  UCA0BR0 = 9;                              // 1MHz 115200 (see User's Guide)
  UCA0BR1 = 0;                              // 1MHz 115200

  UCA0MCTL |= UCBRS_1 + UCBRF_0;            // Modulation UCBRSx=1, UCBRFx=0
  UCA0CTL1 &= ~UCSWRST;                     // **Initialize USCI state machine**
  UCA0IE |= UCRXIE ;                         // Enable USCI_A0 RX interrupt


  __bis_SR_register(GIE);       // Enter LPM0, interrupts enabled
  __no_operation();                         // For debugger


  //tx_buffer[0] = key;
  //TXData = tx_buffer;

  RXData = rx_buffer;

  UCA0TXBUF = *TXData ;

  while(1)
  {
      //UCA0TXBUF = *TXData ;
      flag = rx_buffer[0];

      if (flag == 'T')
      {
          //tx_buffer[0] = key2;
          //T/XData = tx_buffer;

          TA0CTL = TASSEL_2 | MC_1 | ID_3; // SMCLK/8, up mode

          // CCRO defines the limit the selected timer can count up to
          // Clock frequency by default 32.768 MHz, counting frequency cycle 32768 / clock frequency = 1 second
          TA0CCR0 = 512-1;

          TA0CCTL1 = OUTMOD_7;                      // CCR1 reset/set
          TA0CCTL2 = OUTMOD_7;                      // CCR2 reset/set
          TA0CCTL3 = OUTMOD_7;
          TA0CCTL4 = OUTMOD_7;

          TA0CCR1 = 0;
          TA0CCR2 = 400;                            // CCR2 PWM duty cycle

          TA0CCR3 = 0;
          TA0CCR4 = 400;                           // CCR2 PWM duty cycle

          // TACLR timer reset    so there's no need to manually reset the timer when it reaches the limit
          TA0CTL = TASSEL_2 + MC_1 + TACLR;
          //////
      }
      else if (flag == "0")
      {
          TA0CCTL1 = OUTMOD_7;                      // CCR1 reset/set
          TA0CCTL2 = OUTMOD_7;                      // CCR2 reset/set
          TA0CCTL3 = OUTMOD_7;
          TA0CCTL4 = OUTMOD_7;

          TA0CCR1 = 0;
          TA0CCR2 = 128;                            // CCR2 PWM duty cycle

          TA0CCR3 = 0;
          TA0CCR4 = 128;                      // CCR2 PWM duty cycle

          TA0CTL = TASSEL_2 + MC_1 + TACLR;
      }
  }
}

// Echo back RXed character, confirm TX buffer is ready first
#if defined(__TI_COMPILER_VERSION__) || defined(__IAR_SYSTEMS_ICC__)
#pragma vector=USCI_A0_VECTOR
__interrupt void USCI_A0_ISR(void)
#elif defined(__GNUC__)
void __attribute__ ((interrupt(USCI_A0_VECTOR))) USCI_A0_ISR (void)
#else
#error Compiler not supported!
#endif
{
  switch(__even_in_range(UCA0IV,4))
  {
  case 0:break;                             // Vector 0 - no interrupt
  case 2:                                   // Vector 2 - RXIFG
    while (!(UCA0IFG&UCTXIFG));             // USCI_A0 TX buffer ready?
    UCA0TXBUF = UCA0RXBUF;                  // TX -> RXed character

    *RXData = UCA0RXBUF;                 // TX -> RXed character
    break;
  case 4:break;                             // Vector 4 - TXIFG
  default: break;
  }
}

