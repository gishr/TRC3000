#include "opencv2/opencv.hpp"
#include <iostream>
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <iostream>

#include <wiringPi.h>
#include <wiringSerial.h>

using namespace cv;
using namespace std;

void serialTransmit(char dat,int serial_port);


int main() 
{
	int t= 0;
	int serial_port;
	char dat;
	if ((serial_port = serialOpen ("/dev/ttyS0", 115200)) < 0)	/* open serial port */
	{
		fprintf (stderr, "Unable to open serial device: %s\n", strerror (errno)) ;
		return -1;
	}

	if (wiringPiSetup () == -1)					/* initializes wiringPi setup */
	{
		fprintf (stdout, "Unable to start wiringPi: %s\n", strerror (errno)) ;
	}
	cout<<"Setup complete"<<endl;



	VideoCapture cap(0); // open the default camera
    
    if(!cap.isOpened())  // check if we succeeded
    {    
		cout << "camera failed" << endl;
		return -1;
	}
	
	//Rect bounding_rect;
	Scalar color = Scalar(0, 255, 0);

    Mat video;
    namedWindow("Output",1);
    for(;;)
    {
        Mat frame;
        cap >> frame; // get a new frame from camera
		flip(frame,frame,0);						//flip image because cam upside down
        cvtColor(frame, video, COLOR_BGR2HSV);				//convert to hsv
        GaussianBlur(video, video, Size(7,7), 1.5, 1.5);		//smooth out the image   
    	
		inRange(video, Scalar(50, 100, 100), Scalar(80, 230, 230), video);  //adjust for green colour of cone
		//inRange(video, Scalar(40, 40, 70), Scalar(90, 230, 230), video);  //for debugging
		
		
		morphologyEx(video, video, MORPH_OPEN, 11);			//adjust morph technique for best results	
		morphologyEx(video, video, MORPH_CLOSE, 11);
		
		
		Moments m = moments(video,true);					//find centroid of cone
		Point p(m.m10/m.m00, m.m01/m.m00);
		circle(video, p, 5, Scalar(128,0,0), -1);
		int xcoord = m.m10/m.m00;
		cout<< xcoord<< "   x - coordinate"<<endl;
		
		
		// Drawing Contours
		vector<vector<Point> > contours; // Vector for storing contours
		vector<Vec4i> hierarchy;
		
		findContours(video,contours,hierarchy,CV_RETR_EXTERNAL,CV_CHAIN_APPROX_NONE); //find contours
		
		int largest_area=0;
		int largest_contour_index=0;
				
		for( size_t i = 0; i< contours.size(); i++ ) // iterate through each contour.
		{
			double area = contourArea( contours[i] );  //  Find the area of contour
			
		    if( area > largest_area )
		    {
				largest_area = area;
				largest_contour_index = i;               //Store the index of largest contour
				//bounding_rect = boundingRect( contours[i] ); // Find the bounding rectangle for biggest contour
			}
		    //drawContours( video, contours, largest_contour_index, color, -1, LINE_8, hierarchy, 0 );
		}
		
		cout<<"area =  "<<largest_area<<endl;		//debugging
		if( largest_area > 1000)
		{
			if(xcoord < 240)
			{
				dat = 'L';
				serialTransmit(dat,serial_port);
			}
			else if(xcoord > 400 )
			{
				dat = 'R';
				serialTransmit(dat,serial_port);
			}
			else if(xcoord > 240 && xcoord < 400)
			{
				dat = 'F';
				serialTransmit(dat,serial_port);
			}
			cout<<"Transmitting    "<<dat<<endl;
		}
		else
		{
			cout<<"Nothing Detected"<<endl;
			}
		
        imshow("Output",video);
        if(waitKey(16) >= 0){}
          
    }
        
    return 0;
}


void serialTransmit(char dat,int serial_port)
{
	int i =0;
	//for(i=1;i>4;i++)
	{
	  //dat = serialGetchar (serial_port);		/* receive character serially*/	
	  //printf ("%c", dat) ;
	  fflush (stdout) ;
	  serialPutchar(serial_port, dat);		/* transmit character serially on port */
	}
}
